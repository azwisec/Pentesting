IDOR arises when an application uses 
user-supplied input to access objects directly and an attacker can modify the input to obtain unauthorized access. 
IDOR
Testing for IDOR/Broken object level authorization:
Difficulty: Easy

Tips: Don't blindly test for changing numbers till you get PII, tools can do this for you

Finding IDOR Attack Vectors Ideas:

What do they use for authorization?(JWT, API Keys, cookies, tokens) Tip: Find this out by replacing high privaledge authorization with lower privaledge authorization and seeing what the server responds with
Understand how they use ID's, hashes, and their API. Do this by looking at the API Documentations if they have one.
Every time you see a new API endpoint that receives an object ID from the client, ask yourself the following questions:

Does the ID belong to a private resource? (e.g /api/user/123/news vs /api/user/123/transaction)
What are the IDs that belong to me?
What are the different possible roles in the API?(For example — user, driver, supervisor, manager)

https://hackerone.com/reports/390346
https://hackerone.com/reports/227522
https://hackerone.com/reports/287789
https://hackerone.com/reports/264919

Add parameters into the endpoints if there was:
GET /api/v1/messages  -->401
vs
GET /api/v1/messages?user_id=victim_uuid  --->200

Add .json to the endpoint 
/user_data/2444       -->401 Unauthorised
/user_data/2444.json  -->200 OK


Wrap the ID an array
{"id":111}    --->401 Unauthorized
{"id":[111]}  ---> 200 OK

Wrap the ID with a json endpoint
{"id":111}  --->401 Unauthorized
{"id":{"id":111}}  --> 200 OK


-Try to send a wildcard(*) instead of a ID. Sometimes it is rare, sometimes it works.
-If it is number id, be sure to test through a larger amount of numbers, instaead of just gussing. (use intruder burp)
-If endpoint has a name like /api/users/info, check for /api/admins/info ---> sometimes it works
-Replace request method with GET, POST, PUT
-Use burp Autorize extention
-Look after uid And userid etc


We can account takeover.
 By changing other account email or credentials etc.

Previous Reports.
-Change Id to our victim and attacker
-Check on URL -get Reques
-End point
-On uploading images- change that person id 1 into person id 2 ( account_id) change it.
-Change both id, username, uuid, etc..




P1 – Account takeover, Access very important data (such as credit card)

P2 – Change / delete another users’ public data, Access private / public important data (such as tickets, invoice, payment information)

P3 – Access / delete / change private data (limited personal info: name, adress etc.)

P4 – Access any unimportant data

IDOR vulnerabilities’ impact depends on the discretion of the program manager.
https://www.bugcrowd.com/blog/how-to-find-idor-insecure-direct-object-reference-vulnerabilities-for-large-bounty-rewards/
https://medium.com/@aysebilgegunduz/everything-you-need-to-know-about-idor-insecure-direct-object-references-375f83e03a87

Testing with “AutoChrome”
https://miro.medium.com/max/576/1*yE-4b3gCoIiuD8dH03YVrg.png
https://addons.mozilla.org/en-US/firefox/addon/multi-account-containers/



https://www.zapstiko.com/sensitive-data-leak-using-idor-in-integration-service/

Top Reports:
https://github.com/InsiderPhD/hackerone-reports/blob/master/tops_by_bug_type/TOPIDOR.md

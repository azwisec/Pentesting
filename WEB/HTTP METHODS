HTTP offers a number of methods that can be used to perform actions on the web server. 
Many of theses methods are designed to aid developers in deploying and testing HTTP applications. 
These HTTP methods can be used for nefarious purposes if the web server is misconfigured. 
While GET and POST are by far the most common methods that are used to access information provided by a web server, the Hypertext Transfer Protocol (HTTP) allows several other (and somewhat less known) methods.
HEAD
GET
POST
PUT
DELETE
TRACE
OPTIONS
CONNECT
Some of these methods can potentially pose a security risk for a web application, as they allow an attacker to modify the files stored on the web server and, in some scenarios, steal the credentials of legitimate users. More specifically, the methods that should be disabled are the following:

#PUT: This method allows a client to upload new files on the web server. 
An attacker can exploit it by uploading malicious files (e.g.: an asp file that executes commands by invoking cmd.exe), or by simply using the victimâ€™s server as a file repository.

#DELETE: This method allows a client to delete a file on the web server. 
An attacker can exploit it as a very simple and direct way to deface a web site or to mount a DoS attack.

#CONNECT: This method could allow a client to use the web server as a proxy.

#TRACE: This method simply echoes back to the client whatever string has been sent to the server, and is used mainly for debugging purposes. 
This method, originally assumed harmless, can be used to mount an attack known as Cross Site Tracing, which has been discovered by Jeremiah Grossman (see links at the bottom of the page).
If an application needs one or more of these methods, such as REST Web Services (which may require PUT or DELETE), it is important to check that their usage is properly limited to trusted users and safe conditions.


How to test?
-
$ nc www.victim.com 80
OPTIONS / HTTP/1.1
Host: www.victim.com

HTTP/1.1 200 OK
Server: Microsoft-IIS/5.0
Date: Tue, 31 Oct 2006 08:00:29 GMT
Connection: close
Allow: GET, HEAD, POST, TRACE, OPTIONS
Content-Length: 0


The same test can also be executed using nmap and the http-methods NSE script:

C:\Tools\nmap-6.40>nmap -p 443 --script http-methods localhost

Starting Nmap 6.40 ( http://nmap.org ) at 2015-11-04 11:52 Romance Standard Time

Nmap scan report for localhost (127.0.0.1)
Host is up (0.0094s latency).
PORT    STATE SERVICE
443/tcp open  https
| http-methods: OPTIONS TRACE GET HEAD POST
| Potentially risky methods: TRACE
|_See http://nmap.org/nsedoc/scripts/http-methods.html

Nmap done: 1 IP address (1 host up) scanned in 20.48 seconds

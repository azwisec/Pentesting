https://www.aptive.co.uk/blog/tls-ssl-security-testing/


TLS / SSL Security Testing Tools
testssl.sh
testssl.sh is our preferred tool for testing, it covers all the required tests for TLS & SSL assessments and is regularly updated.

Installation
You can install the latest version of tesetssl.sh by performing a git clone of their repository:

git clone https://github.com/drwetter/testssl.sh.git

Test Everything on a Single Host and Output to console
./testssl.sh -e -E -f -p -y -Y -S -P -c -H -U TARGET-HOST

Test Everything on a Single Host and Output to HTML
./testssl.sh -e -E -f -p -y -Y -S -P -c -H -U TARGET-HOST | aha > OUTPUT-FILE.html  

Test all hosts on a Subnet and Output to HTML
./testssl.sh -e -E -f -p -y -Y -S -P -c -H -U 192.168.1.0/24 | aha > OUTPUT-FILE.html  

Same as above, but only enumerate each servers supported ciphers:

./testssl.sh -E 192.168.1.0/24 | aha > OUTPUT-FILE.html  



SWEET32 testssl.sh
Identify if the server offers Triple-DES ciphers, if the server supports Triple-DES itâ€™s vulnerable to SWEET32.
Identify weak ciphers using testssl.sh:

./testssl.sh --ciphers TARGET

If the output shows Tripe DES Ciphers, like in the screenshot below, the target server is vulnerable to SWEET32



SWEET32 Nmap Testing
Nmap can also be used to enumerate the ciphers of a server, the NSE plugin will also notify if any 64-Bit block ciphers are available.

nmap --script=ssl-enum-ciphers -p443 TARGET
If you see the following in the output, 64-Bit block ciphers were discovered

warnings: 
|       64-bit block cipher 3DES vulnerable to SWEET32 attack


Testing for DROWN
DROWN (Decrypting RSA using Obsolete and Weakened eNcryption), 
The most general variant of the DROWN attack exploits a fundamental weakness in the SSLv2 protocol that allows Man-in-The-Middle (MiTM) 
attackers to exploit export-grade cryptography that was introduced to comply with 1990s-era U.S. government restrictions (EXPORT grade encryption is detailed in 
the FREAK vulnerability description below).

testssl.sh DROWN Testing
./testssl.sh -D TARGET
Has your organisation performed an External Penetration Test recently? See our Network Penetration Testing service page for more information.

Nmap DROWN Testing
nmap -p 443 -sV --script=sslv2-drown 


FREAK (CVE-2015-0204)
FREAK Definition
FREAK (Factoring RSA Export Keys), exploits a cryptographic weakness within TLS / SSL that was originally introduced by the US government decades earlier. The idea behind the RSA_EXPORT keys was to allow exports to contain encryption that could not be be broken by average computing resources but could be broken by the NSA. RSA_EXPORT keys are encrypted up 512 bits or less, which are easily crackable using modern computing resources.

The FREAK attack performs a downgrade attack (forces a server to use a weaker cipher), when combined with a Man-in-The-Middle (MiTM) type attack, this allows an attacker to capture data and break the decryption of the weak keys.

Automated testing for the FREAK Attack
testssl.sh FREAK Attack Testing


./testssl -F TARGET
Manual testing for the FREAK Attack
Manually enumerate the servers ciphers using either ./testssl.sh -E TARGET or nmap -p 443 --script=ssl-enum-ciphers TARGET, ensure none of the following ciphers supported by the server contain: EXPORT.


Logjam (CVE-2015-4000)
The Logjam issue exploits a flaw discovered with the way TLS protocol (1.2 and earlier) composes the Diffie-Hellman exchange. Effecting both export and non-export grade cipher suites (export ciphers explained above). The vulnerability allows a Man-in-The-Middle (MiTM) attacker to perform a downgrade attack and use the Diffie-Hellman export ciphers (DHE_EXPORT).

Does your organisation have mobile apps, have they been security tested? See our page on Mobile App Security Testing for more information.

Automated testing for Logjam
testssl.sh test for Logjam
./testssl.sh -J TARGET
Manually testing for Logjam
Disable EXPORT ciphers, Instructions are the same as the FREAK attack, documented above.

Manually enumerate the ciphers suites offered by the server, using either ./testssl.sh -E TARGET or nmap -p 443 --script=ssl-enum-ciphers TARGET.

Heartbleed (CVE-2014-0160)


Heartbleed Definition
A flaw was found in the way OpenSSL handled TLS and DTLS Heartbeat Extension packets that allows an attacker to disclose information from encrypted TLS / DTLS data. A malicious client could send a specially crafted TLS or DTLS Heartbeat packet to disclose a limited portion of memory per request from a connected client or server.

The disclosed portions of memory could include sensitive information such as private keys (used by service providers to encrypt data), names, usernames and passwords of actual users. Allowing attackers to potentially eavesdrop on communications, impersonate users and services and steal data.

Automated testing for Heartbleed
Testing for Heartbleed using testssl.sh:
# ./testssl.sh -B 10.0.1.159


Testing for Heartbleed using Nmap
# nmap -p 443 --script ssl-heartbleed --script-args vulns.showall 10.0.1.159

Manually testing for Heartbleed
Use Metasploit to validate the existed of Heartbleed, using the verbose setting will show the Heartbleed exposed memory leak.

msf> use auxiliary/scanner/ssl/openssl_heartbleed
msf> set rhosts TARGET-ADDRESS
msf> set verbose true
msf> run

POODLE SSLv3 (CVE-2014-3566)
POODLE Definition
The POODLE attack (Padding Oracle On Downgraded Legacy Encryption) was discovered by Google's Security Team on October 14, 2014. The vulnerability exploits the way SSLv3 handles padded bytes when used with (cipher block chaining) CBC mode of operation.

The flaw allows a Man-in-The-Middle (MiTM) attacker to decrypt a selected byte of a cipher text in as few as 256 SSLv3 connections, if they are able to force a victim application to repeatedly send the same data over newly created SSL 3.0 connections.

Automated Testing For POODLE
Testing for POODLE using Nmap
# nmap -p 443 --script ssl-poodle --script-args vulns.showall 10.0.1.159

it will show if it is vulnerable.

Testing for POODLE using testssl.sh
./testssl.sh -O 10.0.1.159

Manual Testing for POODLE
The version of openssl that ships with Kali no longer support SSLv3. Use the binary within testssl.sh/bin/openssl.Linux.x86_64 to perform manual SSLv3 testing.

./openssl.Linux.x86_64 s_client -ssl3 -connect 10.0.1.159:443
If the handshake completes, the server is vulnerable to POODLE.

Example output for a server that is vulnerable to POODLE (certificate snipped out of the response):

